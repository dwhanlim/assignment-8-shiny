plot_ly(d,
x = carat,
y = price,
color = cut)
plot_ly(d,
x = carat,
y = price,
color = cut) %>%
layout(title = "Diamonds")
plot_ly(d,
x = table,
y = depth,
color = price)
plot_ly(d,
x = abs(table - depth),
y = price,
color = cut)
plot_ly(d,
x = table - depth,
y = price,
color = cut)
plot_ly(d,
x = carat,
y = price,
color = cut) %>%
layout(title = "Diamonds")
example <- "An example for the collab"
eggs <- "Need some for eggs"
example <- "An example for the collab"
eggs <- "Need some more eggs"
example <- "An example for the collab"
eggs <- "Need some more eggs"
View(iris)
library(shiny)
library(plotly)
library(shiny)
library(dplyr)
library(shiny)
shiny::runApp('Desktop/info498f/lecture-15-exercises/exercise-1')
getwd()
shiny::runApp('Desktop/info498f/lecture-15-exercises/exercise-1')
getwd()
shiny::runApp('Desktop/info498f/lecture-15-exercises/exercise-1')
setwd('/Users/dennylim/Desktop/info498f/lecture-15-exercises/exercise-1')
shiny::runApp()
getwd()
setwd("/Users/dennylim/Desktop/info498f/assignment-8-shiny
")
setwd("/Users/dennylim/Desktop/info498f/assignment-8-shiny")
data <- data.frame(iris)
class(data)
shiny::runApp('~/Desktop/info498f/lecture-15-exercises/exercise-1')
library(plotly)
require(dplyr)
data <- data.frame("iris")
library(plotly)
require(dplyr)
data <- data.frame("iris")
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = data$Sepal.Lengh,
y = data$Sepal.Width)
}
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Sepal.Length,
y = Sepal.Width)
}
library(plotly)
require(dplyr)
data <- data.frame("iris")
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Sepal.Length,
y = Sepal.Width)
}
library(plotly)
require(dplyr)
data <- data.frame("iris")
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Sepal.Length,
y = Sepal.Width)
}
plot_ly(d,
x = carat,
y = price,
color = cut) %>%
layout(title = "Diamonds")
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Sepal.Length,
y = Sepal.Width) %>%
layout("Flower")
}
build_map(data)
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = data$Sepal.Length,
y = data$Sepal.Width) %>%
layout("Flower")
}
build_map(data)
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Sepal.Length,
y = Sepal.Width) %>%
layout("Flower")
}
build_map(data)
View(data)
data <- data.frame(iris)
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Sepal.Length,
y = Sepal.Width) %>%
layout("Flower")
}
build_map(data)
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Sepal.Length,
y = Sepal.Width, color = species) %>%
layout("Flower")
}
build_map(data)
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Sepal.Length,
y = Sepal.Width, color = Species) %>%
layout("Flower")
}
build_map(data)
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Sepal.Length,
y = Sepal.Width, color = Species) %>%
layout(title = "Flower")
}
build_map(data)
plot_ly(data, type = "scatter",
x = Sepal.Length,
y = Sepal.Width, color = Species, mode = "markers") %>%
layout(title = "Flower")
}
build_map(data)
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Sepal.Length,
y = Sepal.Width, color = Species, mode = "markers") %>%
layout(title = "Flower")
}
build_map(data)
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Pedal.Length,
y = Pedal.Width, color = Species, mode = "markers") %>%
layout(title = "Flower")
}
build_map(data)
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Petal.Length,
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flower")
}
build_map(data)
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = col.Length,
y = col.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Pedal")
build_map(data, Pedal)
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = col.Length,
y = col.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, Pedal)
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = col.Length,
y = col.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal")
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = col,
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal.Length")
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = parse(text = col),
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal.Length")
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = parse(text = col),
y = Petal.Length, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal.Width")
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = parse(text = col),
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal.Length")
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = Petal.Length,
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data)
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = Petal.Width,
y = Petal.Length, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data)
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = Petal.Length,
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data)
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = parse(text = col),
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal.Length")
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = Petal.Length,
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data)
build_map <- function(data) {
plot_ly(data, type = "scatter",
x = Petal.Length,
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
library(shiny)
shinyUI(fluidPage(
titlePanel("Assignment 8"),
sidebarLayout(
sidebarPanel(
selectInput('species', label = "Flower Species",
choices = list("Petals" = "Petal", "Sepals" = "Sepal"),
selected = "Petal")
)
)
))
library(shiny)
shinyUI(fluidPage(
titlePanel("Assignment 8"),
sidebarLayout(
sidebarPanel(
selectInput('species', label = "Flower Species",
choices = list("Petals" = "Petal", "Sepals" = "Sepal"),
selected = "Petal")
)
)
))
library(plotly)
library(shiny)
library(dplyr)
source('build_map.R')
data <- data.frame(iris)
shinyServer(function(input, output) {
output$flower <- renderPlotly({
build_map(data)
})
})
library(shiny)
shinyUI(fluidPage(
titlePanel("Assignment 8"),
sidebarLayout(
sidebarPanel(
selectInput('species', label = "Flower Species",
choices = list("Petals" = "Petal", "Sepals" = "Sepal"),
selected = "Petal")
),
mainPanel(
plotlyOutput('flower')
)
)
))
shiny::runApp()
shiny::runApp()
require(plotly)
data <- data.frame(iris)
build_map(data)
require(plotly)
data <- data.frame(iris)
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = parse(text = col),
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal.Length")
build_map <- function(data, col) {
col <- parse(text = col)
xaxis <- select(data, col)
plot_ly(data, type = "scatter",
x = xaxis,
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal.Length")
build_map <- function(data, col) {
col2 <- parse(text = col)
xaxis <- select(data, col2)
plot_ly(data, type = "scatter",
x = xaxis,
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal.Length")
build_map <- function(data, col) {
#col <- parse(text = col)
xaxis <- select(data, col)
plot_ly(data, type = "scatter",
x = xaxis,
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal.Length")
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = parse(text = col),
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal.Length")
data$Petal.Length
build_map <- function(data, col) {
plot_ly(data, type = "scatter",
x = eval(parse(text = col)),
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal.Length")
build_map <- function(data, col) {
len <- paste0(col, ".Length")
len2 <- eval(parse(text = len))
plot_ly(data, type = "scatter",
x = len2,
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal")
build_map <- function(data, col) {
len <- paste0(col, ".Length")
plot_ly(data, type = "scatter",
x = eval(parse(text = len)),
y = Petal.Width, color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal")
build_map <- function(data, col) {
len <- paste0(col, ".Length")
width <- paste0(col, ".Width")
plot_ly(data, type = "scatter",
x = eval(parse(text = len)),
y = eval(parse(text = width)), color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Petal")
build_map <- function(data, col) {
len <- paste0(col, ".Length")
width <- paste0(col, ".Width")
plot_ly(data, type = "scatter",
x = eval(parse(text = len)),
y = eval(parse(text = width)), color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
build_map(data, "Sepal")
shiny::runApp()
shiny::runApp()
build_map <- function(data, col) {
len <- paste0(col, ".Length")
width <- paste0(col, ".Width")
plot_ly(data, type = "scatter",
x = eval(parse(text = len)),
y = eval(parse(text = width)), color = Species, mode = "markers") %>%
layout(title = "Flowers", xaxis = "Length", yaxis = "Width")
}
shiny::runApp()
build_map <- function(data, col) {
len <- paste0(col, ".Length")
width <- paste0(col, ".Width")
xname <- list(title = "Length")
yname <- list(title = "Width")
plot_ly(data, type = "scatter",
x = eval(parse(text = len)),
y = eval(parse(text = width)), color = Species, mode = "markers") %>%
layout(title = "Flowers", xaxis = xname, yaxis = yname)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
build_map <- function(data, col) {
len <- paste0(col, ".Length")
width <- paste0(col, ".Width")
x <- list(title = "Length")
y <- list(title = "Width")
plot_ly(data, type = "scatter",
x = eval(parse(text = len)),
y = eval(parse(text = width)), color = Species, mode = "markers") %>%
layout(title = "Flowers", xaxis = x, yaxis = y)
}
shiny::runApp()
shiny::runApp()
build_map <- function(data, col) {
len <- paste0(col, ".Length")
width <- paste0(col, ".Width")
#  x <- list(title = "Length")
#  y <- list(title = "Width")
plot_ly(data, type = "scatter",
x = eval(parse(text = len)),
y = eval(parse(text = width)), color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
shiny::runApp()
build_map <- function(data, col) {
len <- paste0(col, ".Length")
width <- paste0(col, ".Width")
#  x <- list(title = "Length")
#  y <- list(title = "Width")
plot_ly(data, type = "scatter",
x = eval(parse(text = len)),
y = eval(parse(text = width)), color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
shiny::runApp()
library(shiny)
shinyUI(fluidPage(
titlePanel("Assignment 8"),
sidebarLayout(
sidebarPanel(
selectInput('species', label = "Flower Species",
choices = list("Petals" = "Petal", "Sepals" = "Sepal"),
selected = "Petal")
),
mainPanel(
plotlyOutput('flower')
)
)
))
library(plotly)
library(shiny)
library(dplyr)
source('build_map.R')
data <- data.frame(iris)
shinyServer(function(input, output) {
output$flower <- renderPlotly({
build_map(data, input$species)
})
})
library(shiny)
shinyUI(fluidPage(
titlePanel("Assignment 8"),
sidebarLayout(
sidebarPanel(
selectInput('species', label = "Flower Species",
choices = list("Petals" = "Petal", "Sepals" = "Sepal"),
selected = "Petal")
),
mainPanel(
plotlyOutput('flower')
)
)
))
library(plotly)
library(shiny)
library(dplyr)
source('build_map.R')
data <- data.frame(iris)
shinyServer(function(input, output) {
output$flower <- renderPlotly({
build_map(data, input$species)
})
})
build_map <- function(data, col) {
len <- paste0(col, ".Length")
width <- paste0(col, ".Width")
#  x <- list(title = "Length")
#  y <- list(title = "Width")
plot_ly(data, type = "scatter",
x = eval(parse(text = len)),
y = eval(parse(text = width)), color = Species, mode = "markers") %>%
layout(title = "Flowers")
}
shiny::runApp()
